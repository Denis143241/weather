<template>
  <div>
    <div class="header">Погода сегодня в городе {{getCity}}</div>
    <div class="center-block">
      <div class="picture-description">
        <img :src="$store.state.images.images.sun" alt="">
        <div class="temp">{{formatTemp(nowTemp)}}</div>
      </div>
    </div>
    <p class="description center">{{getWeatherDescriptions}}</p>
    <div class="other-temps center-block">
      <div class="max">
        <img src="hot.png" alt="Max temp" class="temp-img">
        <p class="additional-temp">{{formatTemp(maxTemp)}}</p>
      </div>
      <div class="min">
        <img src="cold.png" alt="Min temp" class="temp-img">
        <p class="additional-temp">{{formatTemp(minTemp)}}</p>
      </div>
    </div>
    <div class="description center moreInfo" @click="showDescriptions" v-if="!showMore">Подробнее</div>
    <p class="description center moreInfo" @click="showDescriptions" v-if="showMore">Скрыть</p>
    <div class="more" v-if="showMore">
      <div class="img_p center-block">
        <img src="weather.png" alt="">
        <p>Ощущается как {{feelsLike}} &#8451;</p>
      </div>
      <div class="img_p center-block">
        <img src="wind.png" alt="">
        <p>Ветер {{windSpeed}} м.с, {{formatWind(windDeg)}}</p>
      </div>
      <div class="img_p center-block">
        <img src="humidity.png" alt="">
        <p>Влажность {{humidity}}</p>
      </div>
      <div class="img_p center-block">
        <img src="pressure.png" alt="">
        <p>Давление {{pressure}}</p>
      </div>
    </div>
  </div>
</template>

<script>
import {mapGetters} from 'vuex'
import formCity from '@/components/formCity.vue'
export default {
  components: {formCity},
  async fetch({store}) {
    if (store.state.data.length === 0) {
      await store.dispatch('fetch')
    }
  },
  data() {
    return {
      degrees: ['С', 'СВ', 'В', 'ЮВ', 'Ю', 'ЮЗ', 'З', 'СЗ'],
      showMore: false
    }
  },
  methods: {
    showDescriptions() {
      this.showMore = !this.showMore
    },
    formatTemp(value) {
      if (value > 0) return `+${value}`
      else if (value === 0) return value
      else return `-${value}`
    },
    formatWind(deg) {
      let cell = Math.round(deg / 45)
      if (cell >= 8) cell = 0
      return this.degrees[cell]
    }
  },
  computed: {
    ...mapGetters(['getCity', 'getWeatherDescriptions', 'nowTemp', 'minTemp', 'maxTemp', 'feelsLike', 'windSpeed', 'windDeg', 'humidity', 'pressure']),
  }
  
}
</script>

<style scoped>
  .header {
    text-align: center;
    font-size: 40px;
  }
  img {
    width: 130px;
    height: 130px;
    display: inline-block;
  }
  .img_p img {
    width: 30px;
    height: 30px;
    margin-right: 20px;
  }
  .img_p {
    float: left;
  }
  .picture-description {
    text-align: center;
    margin: 50px 0 20px;
  }
  .description {
    margin: 20px 0;
    font-size: 20px;
  }
  .center-block {
    text-align: center;
    display: flex;
    justify-content: center;
    flex-direction: row;
  }
  .temp {
    display: inline-block;
    font-size: 50px;
    font-weight: 500;
    margin-left: 20px;
  }
  .center {
    text-align: center;
  }
  .temp-img {
    width: 50px;
    height: 50px;
    margin-right: 10px;
  }
  .max, .min {
    display: flex;
    margin: 0 100px;
  }
  .additional-temp {
    font-size: 26px;
    font-weight: 500;
  }
  .other-temps {
    margin: 60px 0 20px;
  }
  .moreInfo:hover {
    text-decoration: underline;
    cursor: pointer;
  }
  .more {
    display: block !important;
    margin: 0 auto;
    width: 230px;
    text-align: left;
  }
</style>
